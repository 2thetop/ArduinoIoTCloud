#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "test_getting_started_18_01"
  https://create.arduino.cc/cloud/things/52e306ef-a7b7-47e5-aacd-9046e71a70b6 

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing properties

  bool ledSwitch;
  int intValue;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// Your THING_ID
/* THING_ID should be part of cloudProperties.h */
#define THING_ID "52e306ef-a7b7-47e5-aacd-9046e71a70b6"

// the following include needs data from the Secret tab to define the arrays above
#include "cloudProperties.h"

/*
  The following data fields are filled by the Secret tab.
  Do not modify them here
*/
char ssid[] = SECRET_SSID;        // your network SSID (name)
char pass[] = SECRET_PASS;    // your network password (use for WPA, or use as key for WEP)

#define UPDATE_CYCLE_TIME 1000
unsigned long lastTickTime;
unsigned int cyclesCount = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // wait up to 5 seconds for user to open Serial port
  unsigned long serialBeginTime = millis();
  while (!Serial && (millis() - serialBeginTime > 5000));

  Serial.println("Starting Arduino IoT Cloud on MKR"); 

  // Defined in cloudProperties.h
  initProperties();
  // Defined in ArduinoCloudSettings.h
  initConnection();

  // set last network check to now, since it is connected
  //lastNetworkCheck = millis();
  //lastTickTime = millis();

  ledSwitch = true;
  ledSwitch = false;
  intValue = 0;
}

void loop() {
  unsigned long msNow = millis();
  ArduinoCloud.update();
  if(msNow - lastTickTime > UPDATE_CYCLE_TIME){
    intValue++;
    onIntValueChange();
    Serial.println(intValue);
    
    lastTickTime = msNow;
  }
  
  // Check if device is connected to the network, if it is do nothing, otherwise reconnect it. Leave this at the end of loop().
  checkNetworkConnection();
}

ConnectionManager *conn = new GSMConnectionManager("", "", "", "");

void initConnection() {
  ArduinoIoTPreferredConnection->init();

  // begin of the ArduinoIoTCloud
  if (!ArduinoCloud.begin(conn)) {
    Serial.println("Starting Arduino Cloud failed!");
    while (true);
  }

  int attempts = 0;
  Serial.println("Attempting to connect to Arduino Cloud");
  while (!ArduinoCloud.connect() && attempts++ < ARDUINO_IOT_CLOUD_CONNECTION_RETRIES) {
    Serial.print(".");
    delay(ARDUINO_IOT_CLOUD_CONNECTION_TIMEOUT);
  }

  if (attempts >= ARDUINO_IOT_CLOUD_CONNECTION_RETRIES) {
    Serial.println("\nFailed to connect to Arduino Cloud!");
    while (1);
  }

  Serial.println("\nSuccessfully connected to Arduino Cloud :)");

  CloudSerial.begin(9600);
}

unsigned long lastNetworkCheck = millis();

void checkNetworkConnection() {
  ArduinoIoTPreferredConnection->check();
  
  Serial.println("..Reconnected to the Nework!");

  // Call the reconnect method to clean up the ArduinoCloud connection
  while (!ArduinoCloud.reconnect(ArduinoIoTPreferredConnection->getClient())) {
    delay(ARDUINO_IOT_CLOUD_CONNECTION_TIMEOUT);
  }

  Serial.println("..Reconnected to the Cloud!");

  delay(500);
  // update cheking time
  lastNetworkCheck = millis();
}

void onLedSwitchChange() {
  Serial.print("LED set to ");
  Serial.println(ledSwitch);
  digitalWrite(LED_BUILTIN, ledSwitch);
}


void onIntValueChange() {
  Serial.print("integer set to ");
  Serial.println(intValue);
}
